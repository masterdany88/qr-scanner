{"version":3,"file":"qr-scanner.min.js","sources":["src/qr-scanner.js"],"sourcesContent":["export default class QrScanner {\n    /* async */\n    static hasCamera() {\n        // note that enumerateDevices can always be called and does not prompt the user for permission. However, device\n        // labels are only readable if served via https and an active media stream exists or permanent permission is\n        // given. That doesn't matter for us though as we don't require labels.\n        return navigator.mediaDevices.enumerateDevices()\n            .then(devices => devices.some(device => device.kind === 'videoinput'))\n            .catch(() => false);\n    }\n\n    /* async */\n    hasFlash() {\n      if (!('ImageCapture' in window)) {\n        return Promise.resolve(false);\n      }\n\n      const imageCapture = new ImageCapture(this._getCameraTrack());\n      return imageCapture.getPhotoCapabilities()\n        .then((result) => {\n          return result.fillLightMode.includes('flash');\n        })\n        .catch((error) => {\n          console.warn(error);\n          return false;\n        })\n    }\n\n    constructor(video, onDecode, canvasSize = QrScanner.DEFAULT_CANVAS_SIZE) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n        this._onDecode = onDecode;\n        this._active = false;\n        this._paused = false;\n        this._flashOn = false;\n\n        this.$canvas.width = canvasSize;\n        this.$canvas.height = canvasSize;\n        this._sourceRect = {\n            x: 0,\n            y: 0,\n            width: canvasSize,\n            height: canvasSize\n        };\n\n        this._onCanPlay = this._onCanPlay.bind(this);\n        this._onPlay = this._onPlay.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\n        this.$video.addEventListener('canplay', this._onCanPlay);\n        this.$video.addEventListener('play', this._onPlay);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrWorker = new Worker(QrScanner.WORKER_PATH);\n    }\n\n    isFlashOn() {\n      return this._flashOn;\n    }\n\n    toggleFlash() {\n      this._setFlashOn(!this._flashOn);\n    }\n\n    turnFlashOff() {\n      this._setFlashOn(false);\n    }\n\n    turnFlashOn() {\n      this._setFlashOn(true);\n    }\n\n    destroy() {\n        this.$video.removeEventListener('canplay', this._onCanPlay);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this.stop();\n        this._qrWorker.postMessage({\n            type: 'close'\n        });\n    }\n\n    /* async */\n    start() {\n        if (this._active && !this._paused) {\n            return Promise.resolve();\n        }\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n        this._active = true;\n        this._paused = false;\n        if (document.hidden) {\n            // camera will be started as soon as tab is in foreground\n            return Promise.resolve();\n        }\n        clearTimeout(this._offTimeout);\n        this._offTimeout = null;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            this.$video.play();\n            return Promise.resolve();\n        }\n\n        let facingMode = 'environment';\n        return this._getCameraStream('environment', true)\n            .catch(() => {\n                // we (probably) don't have an environment camera\n                facingMode = 'user';\n                return this._getCameraStream(); // throws if camera is not accessible (e.g. due to not https)\n            })\n            .then(stream => {\n                this.$video.srcObject = stream;\n                this._setVideoMirror(facingMode);\n            })\n            .catch(e => {\n                this._active = false;\n                throw e;\n            });\n    }\n\n    stop() {\n        this.pause();\n        this._active = false;\n    }\n\n    pause() {\n        this._paused = true;\n        if (!this._active) {\n            return;\n        }\n        this.$video.pause();\n        if (this._offTimeout) {\n            return;\n        }\n        this._offTimeout = setTimeout(() => {\n            const track = this.$video.srcObject && this.$video.srcObject.getTracks()[0];\n            if (!track) return;\n            track.stop();\n            this.$video.srcObject = null;\n            this._offTimeout = null;\n        }, 300);\n    }\n\n    /* async */\n    static scanImage(imageOrFileOrUrl, sourceRect=null, worker=null, canvas=null, fixedCanvasSize=false,\n                     alsoTryWithoutSourceRect=false) {\n        let createdNewWorker = false;\n        let promise = new Promise((resolve, reject) => {\n            if (!worker) {\n                worker = new Worker(QrScanner.WORKER_PATH);\n                createdNewWorker = true;\n                worker.postMessage({ type: 'inversionMode', data: 'both' }); // scan inverted color qr codes too\n            }\n            let timeout, onMessage, onError;\n            onMessage = event => {\n                if (event.data.type !== 'qrResult') {\n                    return;\n                }\n                worker.removeEventListener('message', onMessage);\n                worker.removeEventListener('error', onError);\n                clearTimeout(timeout);\n                if (event.data.data !== null) {\n                    resolve(event.data.data);\n                } else {\n                    reject('QR code not found.');\n                }\n            };\n            onError = (e) => {\n                worker.removeEventListener('message', onMessage);\n                worker.removeEventListener('error', onError);\n                clearTimeout(timeout);\n                const errorMessage = !e ? 'Unknown Error' : (e.message || e);\n                reject('Scanner error: ' + errorMessage);\n            };\n            worker.addEventListener('message', onMessage);\n            worker.addEventListener('error', onError);\n            timeout = setTimeout(() => onError('timeout'), 3000);\n            QrScanner._loadImage(imageOrFileOrUrl).then(image => {\n                const imageData = QrScanner._getImageData(image, sourceRect, canvas, fixedCanvasSize);\n                worker.postMessage({\n                    type: 'decode',\n                    data: imageData\n                }, [imageData.data.buffer]);\n            }).catch(onError);\n        });\n\n        if (sourceRect && alsoTryWithoutSourceRect) {\n            promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, null, worker, canvas, fixedCanvasSize));\n        }\n\n        promise = promise.finally(() => {\n            if (!createdNewWorker) return;\n            worker.postMessage({\n                type: 'close'\n            });\n        });\n\n        return promise;\n    }\n\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n        this._qrWorker.postMessage({\n            type: 'grayscaleWeights',\n            data: { red, green, blue, useIntegerApproximation }\n        });\n    }\n\n    setInversionMode(inversionMode) {\n        this._qrWorker.postMessage({\n            type: 'inversionMode',\n            data: inversionMode\n        });\n    }\n\n    _onCanPlay() {\n        this._updateSourceRect();\n        this.$video.play();\n    }\n\n    _onPlay() {\n        this._updateSourceRect();\n        this._scanFrame();\n    }\n\n    _onVisibilityChange() {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    _updateSourceRect() {\n        const smallestDimension = Math.min(this.$video.videoWidth, this.$video.videoHeight);\n        const sourceRectSize = Math.round(2 / 3 * smallestDimension);\n        this._sourceRect.width = this._sourceRect.height = sourceRectSize;\n        this._sourceRect.x = (this.$video.videoWidth - sourceRectSize) / 2;\n        this._sourceRect.y = (this.$video.videoHeight - sourceRectSize) / 2;\n    }\n\n    _scanFrame() {\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(() => {\n            QrScanner.scanImage(this.$video, this._sourceRect, this._qrWorker, this.$canvas, true)\n                .then(this._onDecode, error => {\n                    if (this._active && error !== 'QR code not found.') {\n                        console.error(error);\n                    }\n                })\n                .then(() => this._scanFrame());\n        });\n    }\n\n    _getCameraStream(facingMode, exact = false) {\n        const constraintsToTry = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n\n        if (facingMode) {\n            if (exact) {\n                facingMode = { exact: facingMode };\n            }\n            constraintsToTry.forEach(constraint => constraint.facingMode = facingMode);\n        }\n        return this._getMatchingCameraStream(constraintsToTry);\n    }\n\n    _getCameraTrack() {\n      return this.$video.srcObject.getVideoTracks()[0];\n    }\n\n    _getMatchingCameraStream(constraintsToTry) {\n        if (constraintsToTry.length === 0) {\n            return Promise.reject('Camera not found.');\n        }\n        return navigator.mediaDevices.getUserMedia({\n            video: constraintsToTry.shift()\n        }).catch(() => this._getMatchingCameraStream(constraintsToTry));\n    }\n\n    _setFlashOn(on) {\n      this._flashOn = on;\n      this._getCameraTrack().applyConstraints({\n        advanced: [{ torch: this._flashOn }],\n      });\n    }\n\n    _setVideoMirror(facingMode) {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode==='user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    static _getImageData(image, sourceRect=null, canvas=null, fixedCanvasSize=false) {\n        canvas = canvas || document.createElement('canvas');\n        const sourceRectX = sourceRect && sourceRect.x? sourceRect.x : 0;\n        const sourceRectY = sourceRect && sourceRect.y? sourceRect.y : 0;\n        const sourceRectWidth = sourceRect && sourceRect.width? sourceRect.width : image.width || image.videoWidth;\n        const sourceRectHeight = sourceRect && sourceRect.height? sourceRect.height : image.height || image.videoHeight;\n        if (!fixedCanvasSize && (canvas.width !== sourceRectWidth || canvas.height !== sourceRectHeight)) {\n            canvas.width = sourceRectWidth;\n            canvas.height = sourceRectHeight;\n        }\n        const context = canvas.getContext('2d', { alpha: false });\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(image, sourceRectX, sourceRectY, sourceRectWidth, sourceRectHeight, 0, 0, canvas.width, canvas.height);\n        return context.getImageData(0, 0, canvas.width, canvas.height);\n    }\n\n    /* async */\n    static _loadImage(imageOrFileOrUrl) {\n        if (imageOrFileOrUrl instanceof HTMLCanvasElement || imageOrFileOrUrl instanceof HTMLVideoElement\n            || window.ImageBitmap && imageOrFileOrUrl instanceof window.ImageBitmap\n            || window.OffscreenCanvas && imageOrFileOrUrl instanceof window.OffscreenCanvas) {\n            return Promise.resolve(imageOrFileOrUrl);\n        } else if (imageOrFileOrUrl instanceof Image) {\n            return QrScanner._awaitImageLoad(imageOrFileOrUrl).then(() => imageOrFileOrUrl);\n        } else if (imageOrFileOrUrl instanceof File || imageOrFileOrUrl instanceof URL\n            ||  typeof(imageOrFileOrUrl)==='string') {\n            const image = new Image();\n            if (imageOrFileOrUrl instanceof File) {\n                image.src = URL.createObjectURL(imageOrFileOrUrl);\n            } else {\n                image.src = imageOrFileOrUrl;\n            }\n            return QrScanner._awaitImageLoad(image).then(() => {\n                if (imageOrFileOrUrl instanceof File) {\n                    URL.revokeObjectURL(image.src);\n                }\n                return image;\n            });\n        } else {\n            return Promise.reject('Unsupported image type.');\n        }\n    }\n\n    /* async */\n    static _awaitImageLoad(image) {\n        return new Promise((resolve, reject) => {\n            if (image.complete && image.naturalWidth!==0) {\n                // already loaded\n                resolve();\n            } else {\n                let onLoad, onError;\n                onLoad = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    resolve();\n                };\n                onError = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    reject('Image load error');\n                };\n                image.addEventListener('load', onLoad);\n                image.addEventListener('error', onError);\n            }\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n"],"names":["QrScanner","navigator","mediaDevices","enumerateDevices","then","devices","some","device","kind","catch","window","getPhotoCapabilities","result","fillLightMode","includes","error","console","warn","Promise","resolve","video","onDecode","canvasSize","DEFAULT_CANVAS_SIZE","$video","$canvas","document","createElement","_onDecode","_flashOn","_paused","_active","width","height","_sourceRect","x","y","_onCanPlay","bind","_onPlay","_onVisibilityChange","addEventListener","_qrWorker","Worker","WORKER_PATH","_setFlashOn","removeEventListener","stop","postMessage","type","location","protocol","hidden","clearTimeout","_offTimeout","srcObject","play","facingMode","_getCameraStream","stream","_setVideoMirror","e","pause","setTimeout","track","imageOrFileOrUrl","sourceRect","worker","canvas","fixedCanvasSize","alsoTryWithoutSourceRect","createdNewWorker","promise","reject","data","timeout","onMessage","onError","event","_loadImage","image","imageData","buffer","scanImage","finally","red","green","blue","useIntegerApproximation","inversionMode","_updateSourceRect","_scanFrame","start","videoHeight","sourceRectSize","videoWidth","paused","ended","requestAnimationFrame","exact","min","constraintsToTry","forEach","constraint","_getMatchingCameraStream","getVideoTracks","length","getUserMedia","shift","on","_getCameraTrack","applyConstraints","advanced","torch","style","transform","sourceRectWidth","sourceRectHeight","alpha","context","imageSmoothingEnabled","drawImage","sourceRectX","sourceRectY","getImageData","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad"],"mappings":"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"}